import router from '@ohos.router'
import prompt from '@ohos.prompt'

@Entry
@Component
export struct QuickBookingPage {
  @State selectedDate: string = '2024-01-15'
  @State selectedTime: string = '14:00'
  @State selectedService: string = 'Â≠¶ÊúØÊä•ÂëäÂéÖ'
  @State purpose: string = ''

  build() {
    Column() {
      // Â§¥ÈÉ®ÂØºËà™
      Row() {
        Image($r('app.media.back'))
          .width(24)
          .height(24)
          .onClick(() => {
            router.back()
          })
        
        Text('Âø´Êç∑È¢ÑÁ∫¶')
          .fontSize(18)
          .fontWeight(FontWeight.Bold)
          .layoutWeight(1)
          .textAlign(TextAlign.Center)
          
        Text('')
          .width(24)
      }
      .width('100%')
      .height(56)
      .padding({ left: 16, right: 16 })
      .justifyContent(FlexAlign.SpaceBetween)
      .alignItems(VerticalAlign.Center)

      Scroll() {
        Column() {
          // È¢ÑÁ∫¶Á±ªÂûãÈÄâÊã©
          Column() {
            Text('È¢ÑÁ∫¶Á±ªÂûã')
              .fontSize(16)
              .fontWeight(FontWeight.Medium)
              .alignSelf(ItemAlign.Start)
              .margin({ bottom: 12 })

            Grid() {
              GridItem() {
                this.ServiceCard('Â≠¶ÊúØÊä•ÂëäÂéÖ', 'üé≠', this.selectedService === 'Â≠¶ÊúØÊä•ÂëäÂéÖ')
                  .onClick(() => {
                    this.selectedService = 'Â≠¶ÊúØÊä•ÂëäÂéÖ'
                  })
              }
              
              GridItem() {
                this.ServiceCard('‰ºöËÆÆÂÆ§', 'üíº', this.selectedService === '‰ºöËÆÆÂÆ§')
                  .onClick(() => {
                    this.selectedService = '‰ºöËÆÆÂÆ§'
                  })
              }
              
              GridItem() {
                this.ServiceCard('ÂÆûÈ™åÂÆ§', 'üî¨', this.selectedService === 'ÂÆûÈ™åÂÆ§')
                  .onClick(() => {
                    this.selectedService = 'ÂÆûÈ™åÂÆ§'
                  })
              }
              
              GridItem() {
                this.ServiceCard('‰ΩìËÇ≤Âú∫È¶Ü', '‚öΩ', this.selectedService === '‰ΩìËÇ≤Âú∫È¶Ü')
                  .onClick(() => {
                    this.selectedService = '‰ΩìËÇ≤Âú∫È¶Ü'
                  })
              }
            }
            .columnsTemplate('1fr 1fr')
            .rowsTemplate('1fr 1fr')
            .columnsGap(12)
            .rowsGap(12)
            .height(180)
          }
          .width('100%')
          .padding(16)
          .backgroundColor(Color.White)
          .borderRadius(12)
          .margin({ bottom: 16 })

          // Êó•ÊúüÊó∂Èó¥ÈÄâÊã©
          Column() {
            Text('È¢ÑÁ∫¶Êó∂Èó¥')
              .fontSize(16)
              .fontWeight(FontWeight.Medium)
              .alignSelf(ItemAlign.Start)
              .margin({ bottom: 12 })

            Row() {
              Column() {
                Text('Êó•Êúü')
                  .fontSize(14)
                  .fontColor('#666666')
                  .margin({ bottom: 8 })
                
                Text(this.selectedDate)
                  .fontSize(16)
                  .fontWeight(FontWeight.Medium)
                  .padding({ left: 12, right: 12, top: 8, bottom: 8 })
                  .backgroundColor('#F5F5F5')
                  .borderRadius(8)
              }
              .layoutWeight(1)
              .alignItems(HorizontalAlign.Start)

              Column() {
                Text('Êó∂Èó¥')
                  .fontSize(14)
                  .fontColor('#666666')
                  .margin({ bottom: 8 })
                
                Text(this.selectedTime)
                  .fontSize(16)
                  .fontWeight(FontWeight.Medium)
                  .padding({ left: 12, right: 12, top: 8, bottom: 8 })
                  .backgroundColor('#F5F5F5')
                  .borderRadius(8)
              }
              .layoutWeight(1)
              .alignItems(HorizontalAlign.Start)
            }
            .width('100%')
            .justifyContent(FlexAlign.SpaceBetween)
          }
          .width('100%')
          .padding(16)
          .backgroundColor(Color.White)
          .borderRadius(12)
          .margin({ bottom: 16 })

          // È¢ÑÁ∫¶Áî®ÈÄî
          Column() {
            Text('È¢ÑÁ∫¶Áî®ÈÄî')
              .fontSize(16)
              .fontWeight(FontWeight.Medium)
              .alignSelf(ItemAlign.Start)
              .margin({ bottom: 12 })

            TextArea({ placeholder: 'ËØ∑ËæìÂÖ•È¢ÑÁ∫¶Áî®ÈÄî', text: this.purpose })
              .fontSize(14)
              .height(100)
              .backgroundColor('#F5F5F5')
              .borderRadius(8)
              .onChange((value: string) => {
                this.purpose = value
              })
          }
          .width('100%')
          .padding(16)
          .backgroundColor(Color.White)
          .borderRadius(12)
          .margin({ bottom: 32 })

          // Êèê‰∫§ÊåâÈíÆ
          Button('Êèê‰∫§È¢ÑÁ∫¶')
            .width('100%')
            .height(48)
            .fontSize(16)
            .fontWeight(FontWeight.Medium)
            .backgroundColor('#007AFF')
            .borderRadius(24)
            .margin({ bottom: 32 })
            .onClick(() => {
              prompt.showToast({
                message: 'È¢ÑÁ∫¶Êèê‰∫§ÊàêÂäüÔºÅ',
                duration: 2000
              })
              router.back()
            })
        }
        .padding(16)
      }
      .layoutWeight(1)
    }
    .width('100%')
    .height('100%')
    .backgroundColor('#F5F5F5')
  }

  @Builder
  ServiceCard(title: string, icon: string, isSelected: boolean) {
    Column() {
      Text(icon)
        .fontSize(32)
        .margin({ bottom: 8 })
      
      Text(title)
        .fontSize(14)
        .fontWeight(FontWeight.Medium)
        .fontColor(isSelected ? '#007AFF' : '#333333')
    }
    .width('100%')
    .height(80)
    .justifyContent(FlexAlign.Center)
    .backgroundColor(isSelected ? '#E3F2FD' : '#F9F9F9')
    .borderRadius(12)
    .border({
      width: 2,
      color: isSelected ? '#007AFF' : 'transparent'
    })
  }
} 